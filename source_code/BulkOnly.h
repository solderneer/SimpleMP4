/********************************************************************************
*********************************************************************************
			COPYRIGHT (c)   2004 BY ROCK-CHIP FUZHOU
				--  ALL RIGHTS RESERVED  --

File Name:	BulkOnly.h
Author:		XUESHAN LIN
Created:		29th SEP 2004
Modified:
Revision:		1.00
********************************************************************************
********************************************************************************/

#ifndef _BULKONLY_H
#define _BULKONLY_H

//1可配置参数
#define 	MAX_LUN		(FLASH_DISK+CD_ROM+SD_CARD_EN)	/*最大支持的逻辑设备数*/

//1常量定义

#define	MAX_CDBLEN      				0x10		//最长的CBW长度

/*******************************************************************
CSW返回状态值
*******************************************************************/
#define	CSW_GOOD					0x00		//命令通过
#define	CSW_FAIL					0x01		//命令失败
#define	CSW_PHASE_ERROR			0x02		//命令有误
/*******************************************************************
Bulk Only传输阶段
*******************************************************************/
#define	K_CommandPhase			0x00
#define	K_OutDataPhase				0x01
#define 	K_OutDataPhaseWrite		0x02
#define 	K_OutResponsePhase			0x03
#define 	K_InDataPhase				0x81
#define 	K_InDataPhaseRead			0x82
#define 	K_InResponsePhase			0x83
#define 	K_InCompletionPhase		0x84
#define 	K_XferDirMask				0x80
#define 	K_InCSWPhase				0x08
/*******************************************************************
Bulk Only命令集
*******************************************************************/
#define 	K_SCSICMD_TEST_UNIT_READY					0x00
#define 	K_SCSICMD_REZERO_UNIT						0x01
#define 	K_SCSICMD_REQUEST_SENSE						0x03
#define 	K_SCSICMD_FORMAT_UNIT						0x04
#define 	K_SCSICMD_INQUIRY								0x12
#define 	K_SCSICMD_MODE_SENSE_06						0x1a
#define 	K_SCSICMD_START_STOP_UNIT					0x1b
#define 	K_SCSICMD_SEND_DIAGNOSTIC					0x1d
#define 	K_SCSICMD_PREVENT_ALLOW_MEDIUM_REMOVAL	0x1e
#define 	K_SCSICMD_READ_FORMAT_CAPACITIES			0x23
#define 	K_SCSICMD_READ_CAPACITY						0x25
#define 	K_SCSICMD_READ_10								0x28
#define 	K_SCSICMD_WRITE_10							0x2a
#define 	K_SCSICMD_SEEK_10								0x2b
#define 	K_SCSICMD_WRITE_AND_VERIFY_10				0x2e
#define 	K_SCSICMD_VERIFY_10							0x2f
#define 	K_SCSICMD_MODE_SELECT_10					0x55                
#define 	K_SCSICMD_MODE_SENSE_10						0x5a               
#define 	K_SCSICMD_READ_12								0xa8
#define 	K_SCSICMD_WRITE_12							0xaa
/*******************************************************************
MMC-2命令集
*******************************************************************/
#define 	K_SCSICMD_READ_SUB_CHANNEL					0x42
#define 	K_SCSICMD_READ_TOC							0x43
#define 	K_SCSICMD_GET_CONFIGURATION					0x46
#define 	K_SCSICMD_GET_EVENT							0x4a
/*******************************************************************
Sense codes
*******************************************************************/
#define	SCSI_SENSE_NO_SENSE							0x00
#define	SCSI_SENSE_RECOVERED_ERROR					0x01
#define	SCSI_SENSE_NOT_READY							0x02
#define	SCSI_SENSE_MEDIUM_ERROR						0x03
#define	SCSI_SENSE_HARDWARE_ERROR					0x04
#define	SCSI_SENSE_ILLEGAL_REQUEST					0x05
#define	SCSI_SENSE_UNIT_ATTENTION					0x06
#define	SCSI_SENSE_DATA_PROTECT						0x07
#define	SCSI_SENSE_BLANK_CHECK						0x08
#define	SCSI_SENSE_UNIQUE								0x09
#define	SCSI_SENSE_COPY_ABORTED						0x0A
#define	SCSI_SENSE_ABORTED_COMMAND					0x0B
#define	SCSI_SENSE_EQUAL								0x0C
#define	SCSI_SENSE_VOL_OVERFLOW						0x0D
#define	SCSI_SENSE_MISCOMPARE						0x0E
#define	SCSI_SENSE_RESERVED							0x0F
/*******************************************************************
Additional Sense Codes(ASC)
*******************************************************************/
#define	SCSI_ADSENSE_NO_SENSE						0x00
#define	SCSI_ADSENSE_LUN_NOT_READY					0x04
#define	SCSI_ADSENSE_ILLEGAL_COMMAND				0x20
#define	SCSI_ADSENSE_ILLEGAL_BLOCK					0x21
#define	SCSI_ADSENSE_INVALID_PARAMETER				0x26
#define	SCSI_ADSENSE_INVALID_LUN						0x25
#define	SCSI_ADSENSE_INVALID_CDB						0x24
#define	SCSI_ADSENSE_MUSIC_AREA						0xA0
#define	SCSI_ADSENSE_DATA_AREA						0xA1
#define	SCSI_ADSENSE_VOLUME_OVERFLOW				0xA7
#define	SCSI_ADSENSE_NO_MEDIA_IN_DEVICE				0x3A
#define	SCSI_ADSENSE_FORMAT_ERROR					0x31
#define	SCSI_ADSENSE_CMDSEQ_ERROR					0x2C
#define	SCSI_ADSENSE_MEDIUM_CHANGED				0x28
#define	SCSI_ADSENSE_BUS_RESET						0x29
#define	SCSI_ADWRITE_PROTECT							0x27
#define	SCSI_ADSENSE_TRACK_ERROR						0x14
#define	SCSI_ADSENSE_SAVE_ERROR						0x39
#define	SCSI_ADSENSE_SEEK_ERROR						0x15
#define	SCSI_ADSENSE_REC_DATA_NOECC					0x17
#define	SCSI_ADSENSE_REC_DATA_ECC					0x18
/*******************************************************************
 Additional sense code qualifier(ASCQ)
*******************************************************************/
#define	SCSI_SENSEQ_FORMAT_IN_PROGRESS				0x04
#define	SCSI_SENSEQ_INIT_COMMAND_REQUIRED			0x02
#define	SCSI_SENSEQ_MANUAL_INTERVENTION_REQUIRED	0x03
#define	SCSI_SENSEQ_BECOMING_READY					0x01
#define	SCSI_SENSEQ_FILEMARK_DETECTED				0x01
#define	SCSI_SENSEQ_SETMARK_DETECTED				0x03
#define	SCSI_SENSEQ_END_OF_MEDIA_DETECTED			0x02
#define	SCSI_SENSEQ_BEGINNING_OF_MEDIA_DETECTED	0x04
/*******************************************************************
Mode Sense/Select page constants.
*******************************************************************/
#define	MODE_PAGE_RBC_DEVICE_PARAMETERS			0x06

#define	PAGECTRL_CURRENT								0x00
#define	PAGECTRL_CHANGEABLE							0x01
#define	PAGECTRL_DEFAULT								0x02
#define	PAGECTRL_SAVED								0x03

/*******************************************************************
Page field for Inquiry vital product data parameters
*******************************************************************/
#define	SUPPORTED_PAGES								0x00
#define	SERIAL_NUMBER_PAGE							0x80
#define	DEVICE_INDENIFICATION_PAGE					0x83

//1函数原型声明
extern void BulkOnlyCmd(void) ;
extern void BulkOutDataRcv(void);

extern void SCSICMD_TestUnitReady(void);
extern void SCSICMD_RequestSense(void);
extern void SCSICMD_Inquiry(void);
extern void SCSICMD_PreventAllowMediumRemoval(void);
extern void SCSICMD_StartStopUnit(void);
extern void SCSICMD_ReadCapacity(void);
extern void SCSICMD_Read10(void);
extern void SCSICMD_Write10(void);
extern void SCSICMD_Verify10(void);
extern void SCSICMD_ModeSense10(void);
extern void SCSICMD_ReadFormatCapacities(void);
extern void SCSICMD_ModeSense06(void);                
extern void SCSICMD_ReadSubChannel(void);
extern void SCSICMD_ReadToc(void);
extern void SCSICMD_GetConfiguration(void);
extern void SCSICMD_GetEvent(void);
extern bool CBWValidVerify(void);
extern void CSWHandler(uint8 HostDevCase,uint16 DeviceTrDataLen);
extern void BuildSenseData(uint8 SenseKey, uint8 ASC, uint8 ASCQ);
extern void CopyFlashReside(void);
extern void SendCSW(void);
/*******************************************************************/

//1结构定义
typedef struct _USBMSDC_CBW
{
        uint8	dCBWSignature[4];
        uint8	dCBWTag[4];
        uint8	dCBWDataTransferLength[4];
        uint8	bmCBWFlags;
        uint8	bCBWLUN;
        uint8	bCBWCBLength;
        uint8	CBWCB[16];
} USBMSDC_CBW,*PUSBMSDC_CBW;

typedef struct _USBMSDC_CSW
{
        uint8	dCSWSignature[4];
        uint8	dCSWTag[4];
        uint8	dCSWDataResidue[4];
        uint8	bCSWStatus;
} USBMSDC_CSW;

typedef struct _MODE_PARAMETER_HEAD
{
	uint8	DataLen;
	uint8	MediumType;
	uint8	DeviceParameter;
	uint8	BlockDescriptorLen;
} MODE_PARAMETER_HEAD, * PMODE_PARAMETER_HEAD;

typedef struct _MODE_RBC_DEVICE_PARAMETERS_PAGE
{
	uint8 	PageCode : 6;
	uint8 	Reserved : 1;
	uint8 	PageSavable : 1;
	uint8 	PageLength;
	uint8 	WriteCacheDisable : 1;
	uint8 	Reserved1 : 7;
	uint8 	LogicalBlockSize[2];
	uint8 	NumberOfLogicalBlocks[5];
	uint8 	PowerPerformance;
	uint8 	Lockable : 1;
	uint8 	Formattable : 1;
	uint8 	Writable : 1;
	uint8 	Readable : 1;
	uint8 	Reserved2 : 4;
	uint8 	Reserved3;
}MODE_RBC_DEVICE_PARAMETERS_PAGE, *PMODE_RBC_DEVICE_PARAMETERS_PAGE;


// Host Device Disagreement Matrix
enum _HOST_DEV_DISAGREE
{
	CASEOK = 0,
	CASE1,
	CASE2,
	CASE3,
	CASE4,
	CASE5,
	CASE6,
	CASE7,
	CASE8,
	CASE9,
	CASE10,
	CASE11,
	CASE12,
	CASE13,
	CASECBW,
	CASECMDFAIL
};

typedef struct
{
	uint16 len;
	uint32 LBA;
	uint32 tmp;
	uint16 buf[1024];
} _USBCache;


//1函数原型声明
extern	void		BulkOutPacket(void);
extern	void		BulkInPacket(void);
	


//1全局变量
#ifdef USB
#undef	EXT
#ifdef	IN_BULKONLY
		#define	EXT
#else
		#define	EXT		extern
#endif		

	EXT		uint8 			G_ucBulkStausPhase			DRAM_USB;	//BULK状态阶段状态字
	EXT		uint8 			G_ucBulkPhase				DRAM_USB;	//BULK命令阶段状态字
	EXT		uint32			dCSWDataResidueVal			DRAM_USB;	//剩余字节数
	EXT		uint32			dCBWDaTrLen					DRAM_USB;	//命令长度
	EXT		uint8			*pBulkInDataBuff				DRAM_USB;	//IN包的数据指针
	EXT		uint8			*pBulkOutDataBuff				DRAM_USB;	//OUT包的数据指针

	EXT		uint16 			SCSI_BulkOutDataLen			DRAM_USB;
	EXT		uint32 			SCSI_Write10LBA				DRAM_USB;
	EXT		uint32 			SCSI_Read10LBA				DRAM_USB;
	EXT		USBMSDC_CSW  	pCSW						DRAM_USB;
	EXT		uint8 			BulkOutBuff[2048] 				DRAM_USB ALIGN_ATTR(2);
	EXT		uint8 			BulkInBuff[512]				DRAM_USB ALIGN_ATTR(2);
	EXT		uint8 			SCSIDATA_RequestSense[18]	DRAM_USB;
	EXT		uint8 			MediaChanged				DRAM_USB;	//媒体改变
	EXT		uint8 			CmdCnt						DRAM_USB;	//媒体改变
	EXT		_USBCache		UsbCache					DRAM_USB;
	EXT		uint8 			FirstReadCap					DRAM_USB;
	EXT		uint8 			FirstTestReady				DRAM_USB;
	EXT		uint32 			CdromBlockAddr				DRAM_USB;
	EXT		uint32 			CdromCap					DRAM_USB;

#endif


//1表格定义
#ifdef USB
#ifdef IN_BULKONLY

//SCSI命令INQUIRY格式
uint8 SCSI_INQUIRY[] DRAM_USB_TABLE=
{
	0x00,				//Peripheral Device Type	0, 5:CD-ROM
	0x80,				//RMB	1
	0x00,				//ISO Version+ECMA Version+ANSI Version	2
	0x00,				//Response Data Format	3
	0x1f,				//Additional Length(31)	4

	0x00,0x00,0x00, 		//reserved	5~7

	'R','o','c','k','C','h','i','p',	//Vendor Information		8~15

	'U','S','B',' ','M','P','3',	//Product Idernification	16~31
	' ',' ',' ',' ',' ',' ',' ',' ',' ',

	'1','.','0','0'		 	//version : 1.00	//32~35
 };
uint8 InquirySupportedData[] DRAM_USB_TABLE=
{
	0x00,
	SUPPORTED_PAGES,
	0x00,
	0x03,
	SERIAL_NUMBER_PAGE,
	DEVICE_INDENIFICATION_PAGE
 };
uint8 InquirySnData[] DRAM_USB_TABLE=
{
	0x00,
	SERIAL_NUMBER_PAGE,
	0x00,
	20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20,
	0x20
 };
uint8 InquiryDeviceData[] DRAM_USB_TABLE=
{
	0x00,
	DEVICE_INDENIFICATION_PAGE,
	0x00,
	26,
	0x02,
	0x01,
	0x00,
	22,
	'R', 'o', 'c', 'k', 'c', 'h', 'i', 'p', ' ', 
	'U', 's', 'b', ' ', 'M', 'p', '3', ' ', 
	' ', ' ', ' ', ' '
 };

//SCSI命令INQUIRY格式
uint8 SCSI_INQUIRY_SD[] DRAM_USB_TABLE=
{
	0x00,				//Peripheral Device Type	0
	0x80,				//RMB	1
	0x00,				//ISO Version+ECMA Version+ANSI Version	2
	0x01,				//Response Data Format	3
	0x1f,				//Additional Length(31)	4

	0x00,0x00,0x00, 		//reserved	5~7

	'R','o','c','k','C','h','i','p',	//Vendor Information		8~15

	'U','S','B',' ',' ','S','D',	//Product Idernification	16~31
	' ',' ',' ',' ',' ',' ',' ',' ',' ',

	'1','.','0','0'		 	//version : 1.00	//32~35
 };

#ifdef CD_ROM
//SCSI命令INQUIRY格式
uint8 SCSI_INQUIRY_CDROM[] DRAM_USB_TABLE=
{
	0x05,
	0x80,				//RMB	1
	0x00,				//ISO Version+ECMA Version+ANSI Version	2
	0x00,				//Response Data Format	3
	0x1f,				//Additional Length(31)	4

	0x00,0x00,0x00, 		//reserved	5~7

	'R','o','c','k','C','h','i','p',	//Vendor Information		8~15

	'U','S','B',' ','C','D','-',	//Product Idernification	16~31
	'R','O','M',' ',' ',' ',' ',' ',' ',

	'1','.','0','0'		 	//version : 1.00	//32~35
};

uint8 Toc[] DRAM_USB_TABLE=
{
	0x00, 0x12, 0x01, 0x01, 0x00, 0x14, 0x01, 0x00, 	0x00, 0x00, 0x02, 0x00, 0x00, 0x14, 0xaa, 0x00, 
	0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  
	0xf0, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x0a,	0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x01, 0x00, 0x04, 0x80, 0x00, 0x00, 0x00, 0xf0,  
	0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00,	0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0xf0, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,	0x0a, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x00,  

	0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00,	0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x10, 0x00, 0x4e, 0x0e, 0x76,	0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76,    
	0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76,	0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 
	0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76,	0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76,    
	0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76,	0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 
	0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x76, 0x01,	0x43, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,   

	0x00, 0x00, 0xe0, 0xce, 0x0e, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x01, 0x00, 0xee, 0x2d, 0xf7, 
	0xf6, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,    
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,	0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0x00, 0x22, 0x07, 0x00, 0x00, 0x80, 0x80, 0x00,   
	0xdb, 0x05, 0xf5, 0xf6, 0x07, 0xd3, 0x05, 0x06,	0x00, 0x3e, 0xff, 0x21, 0x00, 0x40, 0xe5, 0xdd, 
	0xe1, 0x77, 0x23, 0x10, 0xfc, 0x77, 0x23, 0x10,	0xfc, 0xf1, 0xd3, 0x05, 0xcb, 0x87, 0x32, 0x83, 
	
	0x16, 0x21, 0x00, 0x40, 0x22, 0x0f, 0x1a, 0x21,	0x00, 0x00, 0x22, 0x11, 0x1a, 0x3e, 0x01, 0x32, 
	0x0b, 0x1a, 0x06, 0x80, 0xc5, 0xcd, 0x66, 0x19,	0xc1, 0x10, 0xf9, 0xc9, 0xcd, 0x4d, 0x17, 0xcd,    
	0x78, 0x17, 0xc9, 0x3e, 0x01, 0x32, 0x0b, 0x1a,	0xdd, 0x21, 0x00, 0x4c, 0xcd, 0x4d, 0x17, 0xcd, 
	0x78, 0x17, 0xc9, 0xcd, 0x10, 0x17, 0xc9, 0xdd,	0x21, 0x00, 0x4c, 0xcd, 0x10, 0x17, 0xc9, 0xcd, 
	0x4d, 0x17, 0xcd, 0x86, 0x17, 0xc9, 0x3e, 0x01,	0x32, 0x0b, 0x1a, 0xdd, 0x21, 0x00, 0x4c, 0xcd, 
	0x4d, 0x17, 0xcd, 0x86, 0x17, 0xc9, 0x3a, 0x47,	0x16, 0xb7, 0x28, 0x03, 0xcd, 0x2b, 0x17, 0xc9, 
	
	0xdd, 0x21, 0x00, 0x4c, 0xcd, 0x2b, 0x17, 0xc9,	0xaf, 0xcd, 0x61, 0x17, 0xc5, 0xdb, 0x05, 0xf5, 
	0x3e, 0xf6, 0xd3, 0x05, 0x3e, 0x01, 0xcd, 0x0c,	0x00, 0x47, 0xf1, 0xd3, 0x05, 0x78, 0xc1, 0x32,    
	0x6e, 0x16, 0xc9, 0xaf, 0xcd, 0x61, 0x17, 0xc5,	0xdb, 0x05, 0xf5, 0x3e, 0xf6, 0xd3, 0x05, 0x3e, 
	0x00, 0xcd, 0x0c, 0x00, 0x47, 0xf1, 0xd3, 0x05,	0x78, 0xc1, 0x32, 0x6e, 0x16, 0xb7, 0x28, 0x04,   
	0xaf, 0x32, 0x47, 0x16, 0xc9, 0xed, 0x53, 0x07,	0x1a, 0x22, 0x09, 0x1a, 0xdd, 0x22, 0x0c, 0x1a, 
	0x3e, 0x07, 0x32, 0x0e, 0x1a, 0x11, 0x07, 0x1a,	0xc9, 0x32, 0x0b, 0x1a, 0xed, 0x53, 0x07, 0x1a, 
	
	0x22, 0x09, 0x1a, 0xdd, 0x22, 0x0c, 0x1a, 0x3e,	0x07, 0x32, 0x0e, 0x1a, 0x11, 0x07, 0x1a, 0xc9, 
	0xdb, 0x05, 0xf5, 0x3e, 0xf3, 0xd3, 0x05, 0x3e,	0x01, 0xdf, 0xf1, 0xd3, 0x05, 0xc9, 0xdb, 0x05,    
	0xf5, 0x3e, 0xf3, 0xd3, 0x05, 0x3e, 0x00, 0xdf,	0xf1, 0xd3, 0x05, 0xc9, 0xc9, 0xf5, 0xe5, 0xd5, 
	0x2a, 0x5c, 0x16, 0x11, 0x80, 0x00, 0xb7, 0xed,	0x52, 0x22, 0x5c, 0x16, 0x30, 0x07, 0x19, 0x7d,    
	0x32, 0x5e, 0x16, 0x18, 0x04, 0x7b, 0x32, 0x5e,	0x16, 0xd1, 0xe1, 0xf1, 0xc9, 0x3a, 0x62, 0x16, 
	0xb7, 0x28, 0x16, 0x2a, 0x11, 0x58, 0x22, 0x0f,	0x1a, 0x2a, 0x13, 0x58, 0x22, 0x11, 0x1a, 0x2a,    
	
	0x16, 0x58, 0x22, 0x63, 0x16, 0x22, 0x5c, 0x16,	0xc9, 0x3a, 0x16, 0x58, 0x67, 0x3a, 0x17, 0x58,
	0x6f, 0x22, 0x63, 0x16, 0x22, 0x5c, 0x16, 0x2a,	0x13, 0x58, 0xed, 0x5b, 0x11, 0x58, 0x7c, 0x65,    
	0x6f, 0x7a, 0x53, 0x5f, 0x22, 0x0f, 0x1a, 0xed,	0x53, 0x11, 0x1a, 0xaf, 0x32, 0x2c, 0x26, 0x32, 
	0x2d, 0x26, 0xb2, 0xb3, 0xb4, 0xc2, 0x13, 0x18,	0x7d, 0xfe, 0x02, 0x30, 0x0e, 0xb7, 0x28, 0x02,  
	0x18, 0x06, 0x3c, 0x32, 0x2c, 0x26, 0x18, 0x03, 	0x32, 0x2d, 0x26, 0x3a, 0x27, 0x26, 0xb7, 0x28,
	0x29, 0xfe, 0x02, 0x38, 0x10, 0x28, 0x6e, 0xaf, 	0x32, 0x2d, 0x26, 0x22, 0x0f, 0x1a, 0xed, 0x53,  
	
	0x11, 0x1a, 0xc3, 0xd2, 0x18, 0x11, 0x10, 0xd1, 	0x19, 0x22, 0x0f, 0x1a, 0x2a, 0x11, 0x1a, 0x11,
	0x00, 0x00, 0xed, 0x5a, 0x22, 0x11, 0x1a, 0xc3, 	0xd2, 0x18, 0xaf, 0x32, 0x2d, 0x26, 0x32, 0x2c,    
	0x26, 0x2a, 0x0f, 0x1a, 0xed, 0x5b, 0x11, 0x1a, 	0xcb, 0x25, 0xcb, 0x14, 0xcb, 0x13, 0xcb, 0x12, 
	0xcb, 0x25, 0xcb, 0x14, 0xcb, 0x13, 0xcb, 0x12, 	0x22, 0x0f, 0x1a, 0xed, 0x53, 0x0f, 0x1a, 0x11,    
	0x10, 0x81, 0x19, 0x22, 0x0f, 0x1a, 0x2a, 0x11, 	0x1a, 0x11, 0x00, 0x00, 0xed, 0x5a, 0x22, 0x11,
	0x1a, 0xaf, 0x2a, 0x63, 0x16, 0xed, 0x5b, 0x63,	0x16, 0x19, 0x19, 0x19, 0x22, 0x63, 0x16, 0x22,    
	
	0x5c, 0x16, 0xc3, 0xd2, 0x18, 0x3a, 0x43, 0x16,	0xb7, 0xca, 0x1f, 0x18, 0x3a, 0x44, 0x16, 0xb7, 
	0xca, 0xa2, 0x18, 0x3a, 0x45, 0x16, 0xb7, 0xca,	0xbb, 0x18, 0x2a, 0x0f, 0x1a, 0xed, 0x5b, 0xf3,    
	0x15, 0x19, 0x22, 0x0f                                                                                               
};
#endif

uint8  SCSIDATA_Sense[] DRAM_USB_TABLE=
{
	#ifdef CD_ROM
	0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,	0xf0, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x0a,
	0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

//	0x01, 0x00, 0x04, 0x80, 0x00, 0x00, 0x00, 0xf0,	0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00,
//	0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00,	0x00, 0xf0, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00
	#else
	0x03,0x00,0x00,0x00	//第3字节为0x80表示写保护
	#endif
	#if 0
	0x01,0x0a,0x00,0x10,
	0x00,0x00,0x00,0x00,
	0x02,0x00,0x00,0x00, 	//page 1
	0x05,0x1e,0x0f,0xa0,	//page 2
	0x04,0x10,0x02,0x00,
	0x00,0xfa,0x00,0x00,
	0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,
	0x00,0x00,0x00,0x00,
	#endif
};


#ifdef DEBUG
uint8 USB_CMD[] DRAM_USB_TABLE=
{
	K_SCSICMD_TEST_UNIT_READY,
	K_SCSICMD_REZERO_UNIT,
	K_SCSICMD_REQUEST_SENSE,
	K_SCSICMD_FORMAT_UNIT,
	K_SCSICMD_INQUIRY,
	K_SCSICMD_MODE_SENSE_06,
	K_SCSICMD_START_STOP_UNIT,
	K_SCSICMD_SEND_DIAGNOSTIC,
	K_SCSICMD_PREVENT_ALLOW_MEDIUM_REMOVAL,
	K_SCSICMD_READ_FORMAT_CAPACITIES,
	K_SCSICMD_READ_CAPACITY,
	K_SCSICMD_READ_10,
	K_SCSICMD_WRITE_10,
	K_SCSICMD_SEEK_10,
	K_SCSICMD_WRITE_AND_VERIFY_10,
	K_SCSICMD_VERIFY_10,
	K_SCSICMD_MODE_SELECT_10,
	K_SCSICMD_MODE_SENSE_10,
	K_SCSICMD_READ_12,
	K_SCSICMD_WRITE_12
};

uint8 *USB_CMD_Desr[] DRAM_USB_TABLE=
{
	"TEST_UNIT_READY",
	"REZERO_UNIT",
	"REQUEST_SENSE",
	"FORMAT_UNIT",
	"INQUIRY",
	"MODE_SENSE_06",
	"START_STOP_UNIT",
	"SEND_DIAGNOSTIC",
	"PREVENT_MEDIUM_REMOVAL",
	"READ_FORMAT_CAPACITIES",
	"READ_CAPACITY",
	"READ_10",
	"WRITE_10",
	"SEEK_10",
	"WRITE_AND_VERIFY_10",
	"VERIFY_10",
	"MODE_SELECT_10",
	"MODE_SENSE_10",
	"READ_12",
	"WRITE_12"
};
#endif


#if 0
	uint8 SCSIDATA_RequestSense[]=
	{
		0x70,				//information filed is invalid=0x70,information filed is valid=0xf0,
		0x00,				//reserve
		0x05,				//Sense Key[3...0]
		0x00,0x00,0x00,0x00,	//information
		0x0a,				//Addition Sense Length
		0x00,0x00,0x00,0x00,	//reserve
		0x20,				//Additional Sense Code(ASC)
		0x00,				//Additional Sense Code Qualifier(ASCQ)
		0x00,				//reserve
		0x00,0x00,0x00,		//reserve
	};
#endif

#else
	extern 	uint8 	SCSI_INQUIRY[];
	extern 	uint8 	InquirySupportedData[];
	extern 	uint8 	InquirySnData[];
	extern 	uint8 	InquiryDeviceData[];
	extern 	uint8 	SCSI_INQUIRY_SD[];
	extern 	uint8 	SCSI_INQUIRY_CDROM[];
	extern 	uint8 	Toc[];
	extern 	uint8 	SCSIDATA_ReadFormatCapacities[];
	extern 	uint8 	SCSIDATA_ReadCapacities[];
	extern 	uint8 	SCSIDATA_Sense[];
#endif
#endif
#endif

/*********************************************************************************************************
**                            End Of File
********************************************************************************************************/

